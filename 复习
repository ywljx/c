//实现一个对整形数组的冒牌排序
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void bubble_sort(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int bubble = 1;
		int j = 0;
		for (j = 0; j < sz - 1- i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				bubble = 0;
			}
			if (bubble == 1)
			{
				break;
			}
		}
	}
}
int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);//冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}





//创建一个整型数组，完成对数组的操作
//1.实现函数Init（）初始化数组全为0
//2.实现Print（）打印数组的每个元素
//3.实现Reverse（）函数完成数组元素的逆置
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void Init(int arr[],int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		arr[i] = 0;
	}
}
void Print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void Reverse(int arr[], int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int sz = sizeof(arr) / sizeof(arr[0]);
	//Init(arr,sz);//把数组初始化0
	Print(arr, sz);//打印
	Reverse(arr, sz);//逆置
	Print(arr, sz);//打印
	return 0;
}




//将数组A中的内容和数组B中的内容进行交换。（数组一样大）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int main()
{
	int a[] = {1,3,5,7,9};
	int b[] = {2,4,6,8,10};
	int sz = sizeof(a) / sizeof(a[0]);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		int tmp = a[i];
		a[i] = b[i];
		b[i] = tmp;
	}
	for (i = 0; i < sz; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	for (i = 0; i < sz; i++)
	{
		printf("%d ", b[i]);
	}
	return 0;
}




//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5 };
	//1是整型 4个字节 short访问两个字节 
	short* p = (short*)arr;
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		*(p + i) = 0;
	}
	//第一趟：p+0  1的四个字节中的前两个字节初始化成0
	//第二趟：p+1  1的四个字节中的后两个字节初始化成0
	//第三趟：p+2  2的四个字节中的前两个字节初始化成0
	//第四趟：p+3  2的四个字节中的后两个字节初始化成0
	for (i = 0; i < 5; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
//0 0 3 4 5





//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0x11223344;
	//高位数字放内存后面 44 33 22 11  各占一个字节
	//char 操作一个字节
	//00 33 22 11
	char* pc = (char*)&a;
	*pc = 0;
	printf("%x\n", a);
	return 0;
}
//11223300






//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int i;//全局变量不初始化默认是0
int main()
{
	i--;//-1
	//sizeof()-计算变量/类型所占内存的大小 是恒>=0的一个无符号数
	//当一个整数和一个无符号数比较大小的时候，这个整数要先转化为无符号数
	//-1转换成无符号数是
	//10000000000000000000000000000001 - 原码
	//11111111111111111111111111111110 - 反码
	//11111111111111111111111111111111 - 补码
	//放内存中第一个1就不是符号的意思了这个数字>sizeof()
	if (i > sizeof(i))
	{
		printf(">\n");
	}
	else
	{
		printf("<\n");
	}
	return 0;
}
// >






//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a, b, c;
	a = 5;
	c = ++a;// c=6 a=6
	b = ++c, c++, ++a, a++;//b=7 c=8 a=8
	//先算=表达式  再算，表达式
	b += a++ + c;//b=7+ 8+8=23 a=9 
	//      ++a  ++c  c++  ++a  a++  a++  +c  +=
	//a  5   6    6    6    7    7    8   9    9
	//b  0   0    7    7    7    7    7   7    23( 7  +  16) 
	//c  0   6    7    7    8    8    8   8    8
	printf("a = %d b = %d c = %d\n", a, b, c);
	return 0;
}
// 9 23 8






