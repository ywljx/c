//实现一个对整形数组的冒牌排序
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void bubble_sort(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int bubble = 1;
		int j = 0;
		for (j = 0; j < sz - 1- i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				bubble = 0;
			}
			if (bubble == 1)
			{
				break;
			}
		}
	}
}
int main()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);//冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}





//创建一个整型数组，完成对数组的操作
//1.实现函数Init（）初始化数组全为0
//2.实现Print（）打印数组的每个元素
//3.实现Reverse（）函数完成数组元素的逆置
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void Init(int arr[],int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		arr[i] = 0;
	}
}
void Print(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}
void Reverse(int arr[], int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int sz = sizeof(arr) / sizeof(arr[0]);
	//Init(arr,sz);//把数组初始化0
	Print(arr, sz);//打印
	Reverse(arr, sz);//逆置
	Print(arr, sz);//打印
	return 0;
}




//将数组A中的内容和数组B中的内容进行交换。（数组一样大）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int main()
{
	int a[] = {1,3,5,7,9};
	int b[] = {2,4,6,8,10};
	int sz = sizeof(a) / sizeof(a[0]);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		int tmp = a[i];
		a[i] = b[i];
		b[i] = tmp;
	}
	for (i = 0; i < sz; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	for (i = 0; i < sz; i++)
	{
		printf("%d ", b[i]);
	}
	return 0;
}




//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5 };
	//1是整型 4个字节 short访问两个字节 
	short* p = (short*)arr;
	int i = 0;
	for (i = 0; i < 4; i++)
	{
		*(p + i) = 0;
	}
	//第一趟：p+0  1的四个字节中的前两个字节初始化成0
	//第二趟：p+1  1的四个字节中的后两个字节初始化成0
	//第三趟：p+2  2的四个字节中的前两个字节初始化成0
	//第四趟：p+3  2的四个字节中的后两个字节初始化成0
	for (i = 0; i < 5; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
//0 0 3 4 5





//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0x11223344;
	//高位数字放内存后面 44 33 22 11  各占一个字节
	//char 操作一个字节
	//00 33 22 11
	char* pc = (char*)&a;
	*pc = 0;
	printf("%x\n", a);
	return 0;
}
//11223300






//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int i;//全局变量不初始化默认是0
int main()
{
	i--;//-1
	//sizeof()-计算变量/类型所占内存的大小 是恒>=0的一个无符号数
	//当一个整数和一个无符号数比较大小的时候，这个整数要先转化为无符号数
	//-1转换成无符号数是
	//10000000000000000000000000000001 - 原码
	//11111111111111111111111111111110 - 反码
	//11111111111111111111111111111111 - 补码
	//放内存中第一个1就不是符号的意思了这个数字>sizeof()
	if (i > sizeof(i))
	{
		printf(">\n");
	}
	else
	{
		printf("<\n");
	}
	return 0;
}
// >






//计算下面代码的结果
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a, b, c;
	a = 5;
	c = ++a;// c=6 a=6
	b = ++c, c++, ++a, a++;//b=7 c=8 a=8
	//先算=表达式  再算，表达式
	b += a++ + c;//b=7+ 8+8=23 a=9 
	//      ++a  ++c  c++  ++a  a++  a++  +c  +=
	//a  5   6    6    6    7    7    8   9    9
	//b  0   0    7    7    7    7    7   7    23( 7  +  16) 
	//c  0   6    7    7    8    8    8   8    8
	printf("a = %d b = %d c = %d\n", a, b, c);
	return 0;
}
// 9 23 8




//写一个函数返回参数二进制中1的个数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int C(unsigned int a)
{
	int count = 0;
	while (a)
	{
		if (a % 2 == 1)
		{
			
			count++;
		}
		a = a / 2;
	}
	return count;
}
int main()
{
	int a =  0;
	scanf("%d", &a);
	//求的是二进制的补码的1的个数
	int count = C(a);
	printf("%d\n", count);
	return 0;
}


//写一个函数返回参数二进制中1的个数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int C(int a)
{
	int count = 0;
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		if (((a >> i) & 1) == 1)
			count++;
	}
	return count;
}
int main()
{
	int a =  0;
	scanf("%d", &a);
	//求的是二进制的补码的1的个数
	int count = C(a);
	printf("%d\n", count);
	return 0;
}


//写一个函数返回参数二进制中1的个数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int C(int a)
{
	int count = 0;
	while (a)
	{
		a = a & (a - 1);
		count++;
	}
	return count;
}
int main()
{
	int a =  0;
	scanf("%d", &a);
	//求的是二进制的补码的1的个数
	int count = C(a);
	printf("%d\n", count);
	return 0;
}



//求二进制中不同位的个数
//两个int(32位)整数m和n的二进制表达中，有多少个位(bit)不同
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int C(int m, int n)
{
	int tmp = m ^ n;
	int count = 0;
	while (tmp)
	{
		tmp = tmp & (tmp - 1);
		count++;
	}
	return count;
}
int main()
{
	int m = 0;
	int n = 0;
	scanf("%d%d", &m,&n);
	int count = C(m, n);
	printf("%d\n", count);
	return 0;
}





//打印二进制的奇数位和偶数位
//获取一个二进制序列中的所有偶数位和奇数位，分别打印出二进制序列
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void Print(int m)
{
	int i = 0 ;
	printf("奇数位:");
	for (i = 30; i >= 0; i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
	printf("偶数位:");
	for (i = 31; i >= 0; i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
}
int main()
{
	int m = 0;
	scanf("%d", &m);
	Print(m);
	return 0;
}





//不允许创建变量，交换两个整数的内容
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int main()
{
	int a = 1;
	int b = 3;
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("%d %d", a, b);
	return 0;
}



、

//写一个函数打印arr数组(整型一维数组)的内容，不使用数组下标，使用指针
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void print(int* p, int sz)
{
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d\n", *(p + i));
	}
}
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	print(arr,sz);
	return 0;
}





//写一个函数判断一个书是不是素数
//利用这个函数打印100-200之间的素数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int is_prime(int n)
{
	int j = 0;
	for (j = 2; j < n; j++)
	{
		if (n % j == 0)
			return 0;
	}
	return 1;
}
int main()
{
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d\n", i);
	}
	return 0;
}






//写一个函数判断year是不是闰年
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int S(int year)
{
	int i = 0;
	if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
		return 1;
	else
		return 0;
}
int main()
{

	int year = 0;
	scanf("%d", &year);
	S(year);
	if (S(year) == 1)
		printf("是");
	else
		printf("不是");

	return 0;
}





//写一个函数，打印乘法口诀表，口诀表的行数和列数自己指定
//如:输入9，输出9*9口诀表 输入12 输出12*12口诀表
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void S(int a)
{
	int i = 0;
	for (i = 1; i <= a; i++)
	{
		int j = 0;
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%-3d ", i, j, i * j);
		}
		printf("\n");
	}
}
int main()
{

	int a = 0;
	scanf("%d", &a);
	S(a);
	return 0;
}





//递归方式实现打印一个整数的每一位
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void S(int a)
{
	if (a > 9)
	{
		S(a/10);
	}
	printf("%d ", a % 10);
}
int main()
{

	int a = 0;
	scanf("%d", &a);
	S(a);
	return 0;
}




//非递归方式求n的阶乘
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void S(int n)
{
	int ret = 1;
	int i = 0;
	for (i = 1; i <= n; i++)
	{
		ret = ret * i;
	}
	printf("%d", ret);
}
int main()
{

	int n = 0;
	scanf("%d", &n);
	S(n);
	return 0;
}





//递归方式求n的阶乘
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int S(int n)
{
	if (n > 1)
	{
		return S(n - 1) * n;
	}
	else
		return 1;
	
}
int main()
{

	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = S(n);
	printf("%d", ret);
	return 0;
}





//非递归方式分别实现strlen
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int S(char* arr)
{
	int count = 0;
	while (*arr != '\0')
	{
		count++;
		arr++;
	}
	return count;
}
int main()
{
	char arr[] = "abc";
	int len = S(arr);
	printf("%d\n", len);
	return 0;
}





//递归方式分别实现strlen
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int S(char* arr)
{
	if (*arr != '\0')
		return 1 + S(arr+1);
	else
		return 0;
}
int main()
{
	char arr[] = "abc";
	int len = S(arr);
	printf("%d\n", len);
	return 0;
}







//非递归方式实现 将参数字符串的字符反向排列（不能使用c函数库中的字符串操作函数）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int my_strlen(char* arr)
{
	int count = 0;
	while (*arr != '\0')
	{
		count++;
		arr++;
	}
	return count;
}
void reverse_string(char* arr)
{
	int left = 0;
	int right = my_strlen(arr) - 1;
	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);//fedcba
	printf("%s\n", arr);
	return 0;
}





//递归方式实现 将参数字符串的字符反向排列（不能使用c函数库中的字符串操作函数）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int my_strlen(char* arr)
{
	int count = 0;
	while (*arr != '\0')
	{
		count++;
		arr++;
	}
	return count;
}
void reverse_string(char* arr)
{
	char tmp = arr[0];
	int len = my_strlen(arr);
	arr[0] = arr[len - 1];
	arr[len - 1] = '\0';
	if (my_strlen(arr + 1) >= 2)
		reverse_string(arr + 1);
	arr[len - 1] = tmp;
}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);//fedcba
	printf("%s\n", arr);
	return 0;
}






//写一个递归函数，输入一个非负整数，返回组成他的数字之和 如:1978  输出 19
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int DigitSum(unsigned int num)
{
	if (num > 9)
	{
		return DigitSum(num / 10) + num % 10;
	}
	else
		return num;
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	int ret =DigitSum(num);
	printf("%d\n", ret);
	return 0;
}





//编写一个函数实现n的k次方，使用递归实现
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
double Pow(int n,int k)
{
	if (k < 0)
		return (1.0 / (Pow(n, -k)));
	else if (k == 0)
		return 1;
	else
		return n * Pow(n, k - 1);
}
int main()
{
	int n = 0;
	int k = 0;
	scanf("%d%d", &n,&k);
	double ret =Pow(n,k);
	printf("%lf\n", ret);
	return 0;
}






//非递归实现 求第n个斐波那契数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret= %d\n", ret);
	return 0;
}







//递归实现 求第n个斐波那契数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int count = 0;
int Fib(int n)
{
	if (n == 3)
	{
		count++;//测试第三个斐波那契数的计算次数
	}
	if (n <= 2)
		return 1;
	else
		return Fib(n - 1) + Fib(n - 2);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret= %d\n", ret);
	printf("count= %d\n", count);
	return 0;
}
