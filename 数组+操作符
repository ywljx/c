#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 }; //定义一个存放10个整型数字的数组
	printf("%d\n", arr[4]);//用下标的方式访问元素  arr[下标]
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	while (i < 10)
	{
		printf("%d\n", arr[i]);
		i++;
	}
	return 0;
}


//操作符
//取模 %
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 5 % 2;
	printf("%d\n", a);
	return 0;
}


//移位操作符
//   << 左移      >>  右移 
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 1;
	int b =a << 2;
	printf("%d\n", b);
	printf("%d\n", a);
	return 0;
}


//（2进制）位操作符
// & 按位与     | 按位或   ^按位异或
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 3;
	int b = 5;
	int c =a& b;
	printf("%d\n", c);
	//011
	//101
	//001
	//有零为零 全一为一
	int d = a|b;
	printf("%d\n", d);
	//011
	//101
	//111
	//有一为一 全零为零
	int e = a^b;
	//011
	//101
	//110
	// 相同为零，不同为一，
	printf("%d", e);
	return 0;
}


//赋值操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 10;
	//复合赋值符
	a = 20;    //  =是赋值  ==是判断相等
	a += 10;  // 等价于a = a+10
	a -= 20;  //等价于a = a-20
	a &= 2;   //等价于 a = a&2
 	return 0;
}


//单目操作符
//双目操作符
//三目操作符

//逻辑反操作
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 10;
	printf("%d\n", a);
	printf("%d\n", !a);//c语言中表示真假 0-假  非0-真
	int b = 0;
	printf("%d\n", b);
	printf("%d\n", !b);
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h> 
int main()
{
	int a = 10;
	//sizeof 计算的是变量/类型所占空间的大小，单位是字节   计算变量（）可以省略   计算类型（）不可省略
	printf("%d\n", sizeof(a));   //4
	printf("%d\n", sizeof(int)); //4
	int arr[10] = { 0 };
	printf("%d\n", sizeof(arr));//40
    //数组的元素个数=数组总大小/每个元素的大小
	int sz = 0;
	sz = sizeof(arr) / sizeof(arr[0]);
	printf("%d\n", sz);
	
	return 0;
}


// ~ 对一个数按位（二进制位）取反
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	int b = ~a;
	//00000000000000000000000000000000
	//11111111111111111111111111111111
	//原码，反码，补码
	//负数在内存中存储的时候，存储的是二进制的补码
	//11111111111111111111111111111111
	//11111111111111111111111111111110
	//10000000000000000000000000000001
	//printf 使用的，打印的是这个数的原码
    printf("%d\n", b);
	return 0;
}


//（类型） 强制类型转换
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = (int)3.14;
	printf("%d\n", a);
	return 0;
}

// &&逻辑与
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 3;
	int b = 5;
	int c = a && b;//同真为真，其余为假
	printf("%d\n", c);
	return 0;
}


// ||  逻辑或
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 3;
	int b = 5;
	int c = a || b;//有真为真，全假为假
	printf("%d\n", c);
	return 0;
}


//条件操作符  三目操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	max = (a > b ? a:b);
	printf("%d\n", max);
	return 0;
}


