#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int ret = 0;
	int ch = 0;
	char password[20] = { 0 };
	printf("请输入密码:");//输入密码，并存放在password数组中
	scanf("%s", password);
	//缓冲区还剩余'\n'
	//读取缓冲区域
	while ((ch = getchar()) != '\n')
	{

	};
	printf("请确认(Y/N):");
	ret = getchar();
	if (ret == 'Y')
		printf("确认成功");
	else
		printf("放弃确认");
	return 0;
}


//输出0-9之间的字符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int ch = 0;
	while ((ch = getchar()) != EOF)
	{
		if (ch < '0' || ch>'9')
			continue;
		putchar(ch);
	}
	return 0;
}



//for 循环
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	for (a = 1;a <= 10; a++)
		printf("%d\n", a);
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	for (a = 1; a <= 10; a++)
	{
		if (a == 5)
			break;
		printf("%d\n", a);
	}
	return 0;
}//结果： 1 2 3 4



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	for (a = 1; a <= 10; a++)
	{
		if (a == 5)
			continue;
		printf("%d\n", a);
	}
	return 0;
}//结果： 1 2 3 4 6 7 8 9 10

//不可在for循环体内修改1循环变量，防止for循环失去控制
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	for (a = 0; a < 10; a++)
	{
		if(a = 5)
		printf("haha\n");
		printf("hehe\n");
	}
	return 0;
}//haha hehe  一直死循环


//建议for语句的循环控制变量的取值采用“前闭后开区间”写法
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
	int i = 0;
	//十次循环  十次打印  十个元素
	for (i = 0; i < 10; i++)  // i<=9  也可以但是不建议
	{
		printf("%d\n",arr[i]);
	}

	return 0;


//for循环的变种
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	for (;;)  
	{
		printf("hehe\n");
	}
	return 0;
}// hehe 死循环



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int j = 0;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			printf("hehe\n");
		}

	}
	return 0;
}//结果:100个呵呵


//for循环的变种
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int j = 0;
	for (; i < 10; i++)
	{
		for (; j < 10; j++)  //没有初始化 j一直等于10
		{
			printf("hehe\n");
		}

	}
	return 0;
}//结果:十个呵呵



//for循环的变种
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int x, y;
	for (x = 0, y = 0; x < 2 && y < 5; ++x, y++)
	{
		printf("hehe\n");
	}
	return 0;
}//结果:hehe  hehe




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int k = 0;
	for (i = 0, k = 0; k = 0; i++, k++)//判断语句成为了k = 0  0为假 所以不循环
		k++;
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int k = 0;
	for (i = 0, k = 0; k = 1; i++, k++)//判断语句成为了k = 1  1为真（非0） 所以死循环
	{
		k++;
		printf("hehe\n");
	}
	return 0;
}




//do...while语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 1;
	do {
		printf("%d\n", i);
		i++;
	} while (i <= 10);
	return 0;
}//结果：1 2 3 4 5 6 7 8 9 10




//do...while语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 1;
	do {
		if (i == 5)
			break;
		printf("%d\n", i);
		i++;
	} while (i <= 10);
	return 0;
}//结果：1 2 3 4




//do...while语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 1;
	do {
		if (i == 5)
			continue;
		printf("%d\n", i);
		i++;
	} while (i <= 10);
	return 0;
}//结果：1 2 3 4死循环




//计算n的阶乘 
//for语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	scanf("%d", &n);
	for (i = 1; i <= n; i++)
	{
		ret = ret * i;
	}
	printf("ret = %d\n", ret);
	return 0;
}



//计算n的阶乘
//do...while语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 1;
	int n = 0;
	int ret = 1;
	scanf("%d", &n);
	do
	{
		ret = ret * i;
		i++;
	} while (i <= n);
	printf("ret = %d\n", ret);
	return 0;
}



//计算3个阶乘的和
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	for (n = 1; n <= 3; n++)
	{
		ret = 1;
		for (i = 1; i <= n; i++)
		{
			ret = ret * i;
		}
		sum = sum + ret;
	}
	printf("sum= %d\n", sum);
	return 0;
}

//计算n个阶乘的和
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	scanf("%d", &n);
	int ret = 1;
	int sum = 0;
	for (i = 1; i <= n; i++)
	{
		ret = ret * i;
		sum = sum + ret;
		
	}
		printf("sum= %d\n", sum);
	
	return 0;
}

//优化
//for语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	for (n = 1; n <= 3; n++)
	{
		ret = ret * n;
		sum = sum + ret;
	}
	printf("sum= %d\n", sum);
	return 0;
}



//计算n个阶乘的和
//do...while语句
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 1;
	int n = 0;
	scanf("%d", &n);
	int ret = 1;
	int sum = 0;
	do
	{
		ret = ret * i;
		sum = sum + ret;
		i++;
	}
	while(i <= n);
	printf("sum = %d\n", sum);
	return 0;
}




//写一个代码，在arr数组（有序的）中找到7
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (k == arr[i])
		{
			printf("找到了，下标是： %d\n", i);
			break;
		}
	}
	if (i == sz)
	{
		printf("找不到.\n");
	}
	return 0;
}


//二分查找算法/折半查找算法
//写一个代码，在arr数组（有序的）中找到7
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int k = 7;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int left = 0;
	int right = sz - 1;
	while (left<=right)
	{
		int mid = (left + right)/2;
		if (arr[mid]>k)
		{
			right=mid-1;
		}
		else if (arr[mid]<k)
		{
			left=mid + 1;
		}
		else
		{
			printf("找到了,下标是：%d\n",mid);
			break;
		}
	}
	if (left>right)
	{
		printf("找不到.\n");
	}
	return 0;
}



//演示多个字符从两端移动，向中间汇聚
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<windows.h>
#include<stdlib.h>
int main()
{
	char arr1[] = "welcome to bit!!!!!!";
	char arr2[] = "####################";
	int left = 0;
	int right = strlen(arr1) - 1;
	while (left <= right)
	{
		arr2[left] = arr1[left];
		arr2[right] = arr1[right];
		printf("%s\n", arr2);
		//休息一秒
		Sleep(1000);
		//执行系统命令的一个函数    cls-清空屏幕
		system("cls");
		left++;
		right--;
	}
	printf("%s\n", arr2);
	return 0;
}



//编写代码实现，模拟用户登陆情景，并且只能登陆三次。（只允许输入三次密码，如果密码正确则提示登陆成功，如果三次均输入错误，则退出程序）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{
	int i = 0;
	char password[20] = { 0 };
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码:>");
		scanf("%s", password);
		if (strcmp(password,"123456") == 0)
		{
			printf("登陆成功\n");
				break;
		}
		else
		{
			printf("密码错误\n");
		}
	}
	if (i == 3)
	{
		printf("三次密码均错误，退出程序\n");
	}
	return 0;
}
