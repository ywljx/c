//strcpy - string copy  -字符串拷贝
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{	
	char arr1[] = "bit";
	char arr2[20] = "#######";
	strcpy(arr2, arr1);
	printf("%s\n", arr2);
	return 0;
}




//memset - memory set - 内存设置
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{	
	char arr[] = "hello world";
	memset(arr, '*', 5);
	printf("%s\n", arr);// ***** world
	return 0;
}




//写一个函数找出两个整数中的最大值
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int get_max(int x, int y)
{
	if (x>y)
		return x;
	else
		return y;
}
int main()
{	
	int a = 10;
	int b = 20;
	int max = get_max(a, b);
	printf("max = %d\n", max);
	return 0;
}



//写一个函数可以交换两个整形变量的内容
//主函数里面写
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>

int main()
{	
	int a = 10;
	int b = 20;
	int tmp = 0;
	tmp = a;
	a = b;
	b = tmp;
	printf("a=%d b=%d\n", a,b);
	return 0;
}

//写一个函数可以交换两个整形变量的内容
//函数方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
void Swap(int* pa, int* pb)//void无返回值
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}
int main()
{	
	int a = 10;
	int b = 20;
	printf("a=%d b=%d\n", a, b);
	Swap(&a, &b);
	printf("a=%d b=%d\n", a,b);
	return 0;
}


//写一个函数可以判断100-200中的一个数是不是素数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int is_prime(int n)
{
	int j = 0;
	for (j = 2; j < n; j++)
	{
		if (n % j == 0)
			return 0; 
	}
	return 1;
}
int main()
{	
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d\n", i);
	}
	return 0;
}

//优化
//写一个函数可以判断100-200中的一个数是不是素数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<math.h>
int is_prime(int n)
{
	int j = 0;
	for (j = 2; j <= sqrt(n); j++)
	{
		if (n % j == 0)
			return 0; 
	}
	return 1;
}
int main()
{	
	int i = 0;
	for (i = 100; i <= 200; i++)
	{
		if (is_prime(i) == 1)
			printf("%d\n", i);
	}
	return 0;
}




//写一个函数可以判断1000-2000中的一年是不是闰年
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int is_leap_year(int y)
{
	if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0))
		return 1;
	else
		return 0;
}
int main()
{	
	int year = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (is_leap_year(year) == 1)
			printf("%d ",year );
	}
	return 0;
}



//写一个函数，实现一个整型有序数组的二分查找
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int binary_search(int arr[], int k, int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] > k)
		{
			right = mid - 1;
		}
		else if (arr[mid] < k)
		{
			left = mid + 1;
		}
		else
		{
			return mid;
		}
	
	}
		return -1;
}
int main()
{	
	int arr[] = {1,2,3,4,5,6,7,8,9 };
	int k = 7;
	int sz = (sizeof(arr) / sizeof(arr[0]));
	int ret =binary_search(arr,k,sz);
	if (ret == -1)
	{
		printf("找不到指定的数字\n");
	}
	else
	{
		printf("找到了，下标是： %d\n", ret);
	}
	return 0;
}




//写一个函数，每调用一次这个函数，就会将num的值增加1
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
void Add(int* p)
{
	(* p)++;
}
int main()
{	
	int num = 0;
	Add(&num);
	printf("num= %d\n", num);
	Add(&num);
	printf("num= %d\n", num);
	Add(&num);
	printf("num= %d\n", num);
	return 0;
}



//嵌套调用
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
void new_line()
{
	printf("hehe\n");
}
void three_line()
{
	int i = 0;
	for (i = 0; i < 3; i++)
	{
		new_line();
	}
}
int main()
{	
	three_line();
	return 0;
}




//链式访问
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{	
	//1.
	int len = 0;
	len = strlen("abc");
	printf("%d\n", len);
	//2.
	printf("%d\n", strlen("abc"));
	return 0;
}




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int main()
{	
	printf("%d", printf("%d", printf("%d", 43)));
	//printf返回值是在屏幕上打印字符的个数
	return 0;
}//结果：4321




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
int Add(int x, int y);//函数声明
int main()
{	
	int a = 10;
	int b = 20;
	int sum = 0;
	sum = Add(a, b);//函数调用
	printf("%d\n", sum);
	return 0;
}
int Add(int x, int y)//函数定义
{
	int z = x + y;
	return z;
}
