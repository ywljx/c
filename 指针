#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;//在内存中开辟一块空间
	int* p = &a;//这里我们对变量a，取出它的地址，可以使用&操作符
	            //将a的地址存放在p变量中，p就是一个指针变量
	printf("%d\n", p);
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	/*printf("%d\n",sizeof(char*));   //8
	printf("%d\n", sizeof(short*));   //8
	printf("%d\n", sizeof(int*));     //8   
	printf("%d\n", sizeof(double*));  //8     */
	int a = 0x11223344;
	int* pa = &a;
	*pa = 0;
	//44 33 22 11 
	//00 00 00 00
	char* pc = &a;
	*pc = 0;
	//44 33 22 11
	//00 33 22 11
	//指针类型决定了指针进行解引用操作的时候，能够访问空间的大小
	//int* p     *p能够访问4个字节
	//char* p    *p能够访问1个字节
	//double* p  *p能够访问8个字节
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0x11223344;
	int* pa = &a;
	char* pc = &a;
	printf("%p\n", pa);
	printf("%p\n", pa + 1); //+4
    //指针类型决定了指针走一步走多远（指针的步长）
	//int* p; p+1  --> 4
	//char* p; p+1  --> 1
	//double* p; p+1  --> 8
	printf("%p\n", pc);
	printf("%p\n", pc + 1); // +1
	return 0;
}




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[10] = { 0 };
	int* p = arr;//数组名-首元素地址
	int i = 0;
	for (i = 0; i < 10; i++)
	{
		*(p + i) = 1;
	}
	//arr
	// 0 0 0 0 0 0 0 0 0 0
	// 1 1 1 1 1 1 1 1 1 1
	return 0;
}



//野指针：就是指针指向的位置是不可知的（随机的，不正确的，没有明确限制的）
//野指针要避免
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int* p;//局部变量指针未初始化，默认为随机值
	*p = 20;
	return 0;
}




//指针越界访问
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[10] = { 0 };
	int* p = arr;
	int i = 0;
	for (i = 0; i < 11; i++)
	{
		//当指针指向的范围超出数组arr的范围时，p就是野指针
		*(p++) = i;
	}
	return 0;
}




//指针指向的空间释放
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int* test()
{
	int a = 10;
	return &a;
}
int main()
{
	int* p = test();//*p接受a的地址之后 a的空间释放 空间会销毁 后续无法操作
	*p = 20;
	return 0;
}
