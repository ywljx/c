//typedef 类型定义-类型重定义
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	typedef unsigned int u_int;
	unsigned int num1 = 10;
	u_int num2 = 20;
	printf("%d\n%d\n", num1,num2);
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void test()
{
	int a = 1;
	a++;
	printf("a=%d\n",a);
}
int main()
{
	int i = 0;
	while (i < 5)
	{
		test();
		i++;
	}
	return 0;
}//结果： 2 2 2 2 2

//static 修饰局部变量
//局部变量的生命周期变长
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void test()
{
	static int a = 1;  //a是一个静态的局部变量
	a++;
	printf("a=%d\n",a);
}
int main()
{
	int i = 0;
	while (i < 5)
	{
		test();
		i++;
	}
	return 0;
}// 结果 ： 2 3 4 5 6

//static修饰全局变量 改变变量的作用域 让静态的全局变量只能在自己所在的源文件内部使用，出了源文件就没法使用了
//static 修饰函数  也是改变了函数的作用域（这种说法不准确） static修饰函数改变了函数的链接属性


// #define 定义标识符常量
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define MAX 100 
int main()
{
	int a = MAX;
	printf("%d\n", a);
	return 0;
}

// #define 可以定义宏
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define MAX 100 
//函数方式
int Max(int x, int y)
{
	if (x > y)
	    return x;
	else
		return y;
}
//宏的方式
#define MAX(X,Y) (X>Y?X:Y)
int main()
{
	int a = 10;
	int b = 20;
	//函数的方式
	int max = Max(a, b);
	printf("max = %d\n", max);
	//宏的方式
	max = MAX(a, b);
	printf("max = %d\n", max);
	return 0;
}
