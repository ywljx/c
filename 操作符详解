//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	short s = 0; 
	int a = 10;
	printf("%d\n", sizeof(s = a + 5));
	printf("%d\n", s);
	return 0;
} // 2 0//算数操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 5 / 2;//商2余1
	printf("a = %d\n", a);
	int b = 5 % 2;//商2余1
	printf("b = %d\n", b);
	return 0;
}
//a=2 b=1



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	double a = 5 / 2.0;//商2余1
	printf("a = %lf\n", a);
	return 0;
}
//a=2.500000



//移位操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 16;
	// >> 右移操作符 移动的是二进制位
	//00000000000000000000000000010000
	//00000000000000000000000000001000
	int b = a >> 1;
	printf("a = %d\n", b);
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = -1;
	//整数的二进制表示有： 原码 反码 补码
	//存储到内存的是补码
	//10000000000000000000000000000001  ——原码
	//11111111111111111111111111111110  ——反码
	//11111111111111111111111111111111  ——补码
	int b = a >> 1;
	printf("a = %d\n", b);
	return 0;
}




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 5;
	//00000000000000000000000000000101
	int b = a << 1;
	printf("a = %d\n", b);
	return 0;
}//10



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	//& - 按2进制位与
	int a = 3;
	int b = 5;
	int c = a & b;
	//00000000000000000000000000000011
	//00000000000000000000000000000101
	//00000000000000000000000000000001
	printf("%d\n", c);
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	// | - 按2进制位或
	int a = 3;
	int b = 5;
	int c = a | b;
	//00000000000000000000000000000011
	//00000000000000000000000000000101
	//00000000000000000000000000000111
	printf("%d\n", c);
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	// ^ - 按2进制位异或
	//相同为0 相异为1
	int a = 3;
	int b = 5;
	int c = a ^ b;
	//00000000000000000000000000000011
	//00000000000000000000000000000101
	//00000000000000000000000000000110
	printf("%d\n", c);
	return 0;
}




//不创建临时变量实现两个数的交换
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 3;
	int b = 5;
	printf("before: a=%d b=%d\n", a, b);

	////加减法 可能会溢出
	//a = a + b;
	//b = a - b;
	//a = a - b;

	//异或的方法
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	//a:011 110     101
	//b:101     011
	//原理： a^0=a   b^b=0  
	printf("after: a=%d b=%d\n", a, b);
	return 0;
}




//编写代码实现：求一个整数存储在内存中的二进制中1的个数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int num = 0;
	int count = 0;
	scanf("%d", &num);
	//统计num的补码中有几个1
	/*while (num)
	{
		if (num % 2 == 1)
			count++;
		num = num / 2;
	}*/

	int i = 0;
	for (i = 0; i < 32; i++)
	{
		if (1 == ((num >> i) & 1))
			count++;
	}
	printf("%d\n", count);
	return 0;
}





//赋值操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	a = a + 2;
	a += 2;//复合赋值符

	a = a >> 1;
	a >>= 1;

	a = a & 1;
	a &= 1;

	return 0;
}




//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	printf("%d\n", !a);//! 真变假 假变真
	if (!a)
	{
		printf("呵呵\n");//a为假 打印呵呵
	}
	return 0;
}




//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	int* p = &a;//取地址操作符
	*p = 20;//解引用操作符
	return 0;
}




//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	char c = 'r';
	char* p = &c;
	int arr[10] = { 0 };
	//sizeof 计算的是变量所占内存空间的大小 单位是字节
	printf("%d\n", sizeof(a));//a的（）可以省略
	printf("%d\n", sizeof(int))//int 的（）不能省略   类型都不可省略
		;
	printf("%d\n", sizeof(c));
	printf("%d\n", sizeof(char));

	printf("%d\n", sizeof(p));
	printf("%d\n", sizeof(int*));

	printf("%d\n", sizeof(arr));
	printf("%d\n", sizeof(int[10]));
	return 0;
}




//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	short s = 0;
	int a = 10;
	printf("%d\n", sizeof(s = a + 5));
	printf("%d\n", s);
	return 0;
} // 2 0
