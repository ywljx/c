#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//描述一个学生
//名字 年龄 电话 性别
struct Stu  //struct - 结构体关键字     Stu - 结构体标签     struct Stu - 结构体类型
{
	//成员变量
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}s1,s2,s3;//s1,s2,s3是三个全局的结构体变量(尽量不使用)
//创建一个结构体类型
int main()
{
	struct Stu s;//创建结构体变量   s是局部变量
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
int main()
{
	struct Stu s1;
	Stu s2;
	return 0;
}



//初始化
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
int main()
{
	struct Stu s1 = {"张三",20,"111111111111","男"};
	Stu s2 = {"李四",30,"222222222222","男"};
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct S
{
	int a;
	char c;
	char arr[20];
	double d;
};
struct T
{
	char ch[10];
	struct S s;
	char* pc;
};
int main()
{
	char arr[] = "hello bit\n";
	struct T t = { "呵呵",{100,"w","hello world",3.14},arr };
	printf("%s\n", t.ch);
	printf("%s\n", t.s.arr);
	printf("%lf\n", t.s.d);
	printf("%s\n", t.pc);
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
void Print1(Stu s)
{
	printf("name: %s\n", s.name);
	printf("age : %d\n", s.age);
	printf("tele: %s\n", s.tele);
	printf("sex : %s\n", s.sex);
}
void Print2(Stu* ps)
{
	printf("name: %s\n", ps->name);
	printf("age : %d\n", ps->age);
	printf("tele: %s\n", ps->tele);
	printf("sex : %s\n", ps->sex);

}
int main()
{
	 Stu s = { "李四",40,"11111111111","男" };
	 Print1(s);
	 Print2(&s);
	 //2优于1  (函数传参的时候，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降)
	return 0;
}
