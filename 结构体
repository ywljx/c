#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//描述一个学生
//名字 年龄 电话 性别
struct Stu  //struct - 结构体关键字     Stu - 结构体标签     struct Stu - 结构体类型
{
	//成员变量
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}s1,s2,s3;//s1,s2,s3是三个全局的结构体变量(尽量不使用)
//创建一个结构体类型
int main()
{
	struct Stu s;//创建结构体变量   s是局部变量
	return 0;
}

  

#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
int main()
{
	struct Stu s1;
	Stu s2;
	return 0;
}




//初始化
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
int main()
{
	struct Stu s1 = {"张三",20,"111111111111","男"};
	Stu s2 = {"李四",30,"222222222222","男"};
	return 0;
}



#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct S
{
	int a;
	char c;
	char arr[20];
	double d;
};
struct T
{
	char ch[10];
	struct S s;
	char* pc;
};
int main()
{
	char arr[] = "hello bit\n";
	struct T t = { "呵呵",{100,"w","hello world",3.14},arr };
	printf("%s\n", t.ch);
	printf("%s\n", t.s.arr);
	printf("%lf\n", t.s.d);
	printf("%s\n", t.pc);
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
typedef struct Stu
{
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
void Print1(Stu s)
{
	printf("name: %s\n", s.name);
	printf("age : %d\n", s.age);
	printf("tele: %s\n", s.tele);
	printf("sex : %s\n", s.sex);
}
void Print2(Stu* ps)
{
	printf("name: %s\n", ps->name);
	printf("age : %d\n", ps->age);
	printf("tele: %s\n", ps->tele);
	printf("sex : %s\n", ps->sex);

}
int main()
{
	 Stu s = { "李四",40,"11111111111","男" };
	 Print1(s);
	 Print2(&s);
	 //2优于1  (函数传参的时候，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降)
	return 0;
}




//6分（满分10分）
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void my_strcpy(char* dest, char* src)
{
	while (*src != '\0')
	{
		*dest = *src;
			src++;
			dest++;
	}
	*dest = *src;

}
int main()
{
	char arr1[] = "#########################";
	char arr2[] = "bit";
	my_strcpy(arr1,arr2);
	printf("%s", arr1);
	return 0;
}

//优化 7分
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void my_strcpy(char* dest, char* src)
{
	while (*dest++ = *src++)
	{
		;
	}
}
int main()
{
	char arr1[] = "#########################";
	char arr2[] = "bit";
	my_strcpy(arr1,arr2);
	printf("%s", arr1);
	return 0;
}


//优化  8分
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>
void my_strcpy(char* dest, char* src)
{
	assert(dest != NULL);//断言
	assert(src != NULL);//()里面表达式为真，无事发生，为假，会报错 
	while (*dest++ = *src++)
	{
		;
	}
}
int main()
{
	char arr1[] = "#########################";
	char arr2[] = "bit";
	my_strcpy(arr1,NULL);
	printf("%s", arr1);
	return 0;
}


//优化  9分
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>
void my_strcpy(char* dest,const char* src)
{
	assert(dest != NULL);//断言
	assert(src != NULL);//()里面表达式为真，无事发生，为假，会报错 
	while (*dest++ = *src++)
	{
		;
	}
}
int main()
{
	char arr1[] = "#########################";
	char arr2[] = "bit";
	my_strcpy(arr1,NULL);
	printf("%s", arr1);
	return 0;
}



//const
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	const int num = 10;
	const int * p = &num;
	*p = 20;//err   const 放在指针变量的左边时,修饰的是*p,也就是说:不能通过p来改变*p(num)的值，
	printf("%d\n", num);


	const int num = 10;
    int * const p = &num;
	*p = 20;
	int n = 100;
	p = &n;//err   const 放在指针变量的右边时,修饰的是指针变量p本身,也就是说:p不能被改变了,
	printf("%d\n", num);
	return 0;
}



//最终优化 10分
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>
char* my_strcpy(char* dest, const char* src)
{
	char* ret = dest;
	assert(dest != NULL);
	assert(src != NULL);
//把src指向的字符串拷贝到dest指向的空间，包含'\0'字符
	while (*dest++ = *src++)
	{
	    ;
	}
	return ret;
}
int main()
{
	char arr1[] = "#########################";
	char arr2[] = "bit";
	printf("%s", my_strcpy(arr1, arr2));
	return 0;
}




//对strlen进行优化
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<assert.h>
int my_strlen(const char* str)
{
	int count = 0;
	assert(str != NULL);
	while (*str !='\0')
	{
		count++;
		str++;
	}
	return count;
}
int main()
{
	char arr[] = "abcdef";
	int len = my_strlen(arr);
	printf("%d\n",len);
	return 0;
}
