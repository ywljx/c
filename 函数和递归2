//递归与迭代
//求n的阶乘。（不考虑溢出）
//循环的方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int Facl(int n)
{
	int i = 0;
	int ret = 1;
	for (i = 1; i <= n; i++)
	{
		ret *= i;
	}
	return ret;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Facl(n);
	printf("%d\n", ret);
	return 0;
}




//递归与迭代
//求n的阶乘。（不考虑溢出）
//递归的方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int Facl(int n)
{
	if (n <= 1)
		return 1;
	else
	return n*Facl(n-1);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Facl(n);
	printf("%d\n", ret);
	return 0;
}




//求第n个斐波那契数。（不考虑溢出）
//斐波那契数： 1 1 2 3 5 8 13 21 34 55 ...
// Fib(n) :    n<=2 ,1      n>2 ,Fib(n-1)+Fib(n-2)
//递归方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int count = 0;
int Fib(int n)
{
	if (n == 3)
	{
		count++;//测试第三个斐波那契数的计算次数
	}
	if (n <= 2)
		return 1;
	else
		return Fib(n - 1) + Fib(n - 2);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret= %d\n", ret);
	printf("count= %d\n", count);
	return 0;
}




//循环方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret= %d\n", ret);
	return 0;
}




//循环方式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret= %d\n", ret);
	return 0;
}
