//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	printf("%d\n", a);
	printf("%d\n", ~a);
	//~按（二进制）位取反
	//00000000000000000000000000000000
	//11111111111111111111111111111111 -补码
	//11111111111111111111111111111110 -反码
	//10000000000000000000000000000001 -原码
	//-1
	return 0;
} 



//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 11;
	a = a | (1 << 2);
	printf("%d\n", a);
	a = a& (~(1 << 2));
	printf("%d\n", a);
	//00000000000000000000000000001011
	//00000000000000000000000000000100
	//00000000000000000000000000001111
	//1<<2
	//00000000000000000000000000000001
	//00000000000000000000000000000100

	//00000000000000000000000000001111
	//11111111111111111111111111111011
	//00000000000000000000000000000100
	//00000000000000000000000000001011
	return 0;
} 



//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	//printf("%d\n", ++a);//前置++,先++，后使用
	//11
	printf("%d\n", a++);//后置++,先使用,在++
	//10
	return 0;
} 



//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = (int)3.14;
	return 0;
} 





//单目操作符  只有一个操作数
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
void test1(int arr[])
{
	printf("%d\n", sizeof(arr));//8(64位)
}
void test2(char ch[])
{
	printf("%d\n", sizeof(ch));//8(64位)
}
int main()
{
	int arr[10] = { 0 };
	char ch[10] = { 0 };
	printf("%d\n", sizeof(arr));//40
	printf("%d\n", sizeof(ch));//10
	test1(arr);
	test2(ch);
	return 0;
} 




//逻辑操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	//&&逻辑与 全真则真 有假则假
	//||逻辑与 有真则真 全假则假
	int a = 3;
	int b = 5;
	int c = 0;
	int e = a && b;
	printf("%d\n", e);//1
	int f = a && c;
	printf("%d\n", f);//0
	int d = a || b;
	printf("%d\n", d);//1
	int i = a || c;
	printf("%d\n", i);//1
	return 0;
} 




//逻辑操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i = 0, a = 0, b = 2, c = 3, d = 4;
	//i = a++ && ++b && d++;//1 2 3 4  &&逻辑与 只要左边为假，右边不看总体为假 直接不算了
	i = a++ || ++b || d++; // 1 3 3 4  ||逻辑或 只要左边为真，右边不看总体为真 直接不算了
	printf("a= %d\nb= %d\nc= %d\nd= %d\n", a, b, c, d);
	return 0;
} 




//条件操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 0;
	int b = 0;
	/*if (a > 5)
		b = 3;
	else
		b = -3;*/

	b = (a > 5 ? 3 : -3);
	printf("%d\n", b);

	return 0;
}


//条件操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	max = (a > b ? a : b);
	printf("%d\n", max);
	return 0;
} 




//逗号表达式
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 1;
	int b = 2;
	int c = (a > b, a = b + 10, a, b = a + 1);
	printf("%d\n", c);
	return 0;
}//13





//函数调用操作符
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int get_max(int x,int y)
{
	return x > y ? x : y;
}
int main()
{
	int a = 10;
	int b = 20;
	//调用函数的时候的()就是函数调用操作符
	int max = get_max(a, b);
	printf("max = %d\n", max);
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct Stu
{
	char name[20];
	int age;
	char id[20];
};
int main()
{
	//使用struct Stu这个类类型创建了一个学生对象s1，并初始化
	struct Stu s1 = { "张三",18,"20230721" };
	printf("%s\n", s1.name);
	printf("%d\n", s1.age);
	printf("%s\n", s1.id);
        //结构体变量.成员名
	return 0;
}




#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct Stu
{
	char name[20];
	int age;
	char id[20];
};
int main()
{
	//使用struct Stu这个类类型创建了一个学生对象s1，并初始化
	struct Stu s1 = { "张三",18,"20230721" };
	struct Stu* ps =&s1;
	printf("%s\n", (*ps).name);
	printf("%d\n", (*ps).age);
	printf("%s\n", (*ps).id);
	//结构体变量.成员名
	return 0;
}





#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct Stu
{
	char name[20];
	int age;
	char id[20];
};
int main()
{
	//使用struct Stu这个类类型创建了一个学生对象s1，并初始化
	struct Stu s1 = { "张三",18,"20230721" };
	struct Stu* ps =&s1;
	printf("%s\n", ps->name);
	printf("%d\n", ps->age);
	printf("%s\n", ps->id);
	//结构体指针->成员名
	return 0;
}



